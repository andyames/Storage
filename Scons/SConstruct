# -*- coding: utf-8 -*-

# === Test Script for the Builder ==================================================================================

import urllib2, re, os, sqlalchemy
import SCons.Errors


# === helper functions =============================================================================================
# ==================================================================================================================
# test URL Downloadbuilder with LAPack, we use a normal
# Python function for getting the latest download URL
def LaPack_DownloadURL() :
    # read download path of the LAPack (latest version)
    f = urllib2.urlopen("http://www.netlib.org/lapack/")
    html = f.read()
    f.close()
    
    found = re.search("<a href=\"http://www.netlib.org/lapack/(.*)tgz\">", html)
    if found == None :
        raise SCons.Errors.StopError("LAPack Download URL not found")
        
    return found.group(0).replace("<a href=\"", "").replace("\">", "")


# test URL Downloadbuilder with LUA, we use a normal
# Python function for getting the latest download URL
def LUA_DownloadURL() :
    # read download path of the LUA library (latest version)
    f = urllib2.urlopen("http://www.lua.org/download.html")
    html = f.read()
    f.close()

    found = re.search("<a href=\"ftp/lua-(.*)\.tar\.gz\">", html, re.IGNORECASE)
    if found == None :
        raise SCons.Errors.StopError("LUA Download URL not found")

    downloadurl = found.group(0).replace("\"", "").replace("<", "").replace(">", "")
    downloadurl = re.sub(r'(?i)a href=', "", downloadurl)

    return "http://www.lua.org/" + downloadurl


# test URL Downloadbuilder with Boost, we use a normal
# Python function for getting the latest download URL
def Boost_DownloadURL() :
    # read download path of the Boost (latest version)
    f = urllib2.urlopen("http://www.boost.org/users/download/")
    html = f.read()
    f.close()

    found = re.search("<a href=\"https://sourceforge.net/projects/boost/files/boost/(.*)\">Download</a>", html)
    if found == None :
        raise SCons.Errors.StopError("Boost Download URL not found")

        
    # read url of the tar.bz2
    f = urllib2.urlopen( found.group(0).replace("<a href=\"", "").replace("\">Download</a>", "") )
    html = f.read()
    f.close()

    found = re.search("http://sourceforge.net/projects/boost/files/boost/(.*).tar.bz2/download", html)
    if found == None :
        raise SCons.Errors.StopError("Boost file Download URL not found")

    # create download URL
    return "http://downloads.sourceforge.net/project/boost/boost/"+found.group(1)+".tar.bz2"     
# ==================================================================================================================
# ==================================================================================================================





# === test calls ===================================================================================================
# test Scons script with my builders + create environment
env = Environment( tools = ["default", "URLDownload", "Repository", "Unpack", "Database"], ENV = os.environ )


# === Database builder =============================================================================================
# The database builder can create and update database structures which are supported by http://www.sqlalchemy.org/ .
# The database will be describe like a Python dictionary with the parameters and pushed to the builder

database = {


    "mytable" : {
        
        "field1" : {
            "kind" : "column",
            "type" : sqlalchemy.String(120)
        },
        
        "field2" : {
            "kind" : "column",
            "type" : sqlalchemy.String(180)
        },
        
        "field3" : {
            "kind" : "index"
        }
    },
    
    
    "mytable2" : {
    
        "fieldA" : {
            "kind" : "column",
            "type" : sqlalchemy.String(20)
        },
    
        "fieldB" : {
            "kind" : "column",
            "type" : sqlalchemy.String(40)
        },
        
        "fieldC" : {
            "kind" : "column",
            "type" : sqlalchemy.String(60)
        },
        
        "pk"     : {
            "kind"        : "column",
            "type"        : sqlalchemy.Integer,
            "primary_key" : True
        },
        
        "insert" : [
            {"fieldB" : "blub", "fieldA" : "1234"},
            {"fieldB" : "new blub", "fieldA" : "987"},
            {"fieldC" : "xxx", "fieldB" : "new blub", "fieldA" : "987"}
        ]
    }
    
    
}

db = env.DatabaseCreate( "db", "blub", connection="mysql+pymysql://root:root@localhost:8889/scons", layout=database, DATABASE_VERBOSE = True )
Default( db )
AlwaysBuild( db )
# ==================================================================================================================




# === Download & Unpack Builder ====================================================================================
# The Download & Unpack builder is used for downloading source packages eg DLL's and compiles them on-fly. The builder
# can be used for solving dependencies on a program. The Unpack builder call the system-wide extraction tools for
# unpacking the archive data (optional the list of files which are needed by the next target can be inject by the builder)

#env.Unpack("lapack-extract-tgz",  env.URLDownload( "lapack-download", LaPack_DownloadURL() ) ) 
#env.Unpack("lua-extract-gz",  env.URLDownload( "lua-download", LUA_DownloadURL() ) )
#env.Unpack("boost-extract-bz2",  env.URLDownload( "boost-download", Boost_DownloadURL() ) )

# we download LUA source package, extract it and compiled it for OSX on-fly
"""
dw         = env.URLDownload( "lua-download", LUA_DownloadURL() )
extractdir = str(dw).replace("'", "").replace("[", "").replace("]", "").replace(".tar.gz", "")
extract    = env.Unpack("lua-extract",  dw, UNPACKLIST=[os.path.join(extractdir, "src", i) for i in [ "lapi.c", "lcode.c", "lctype.c", "ldebug.c", "ldo.c", "ldump.c", "lfunc.c", "lgc.c", "llex.c", "lmem.c", "lobject.c", "lopcodes.c", "lparser.c", "lstate.c", "lstring.c", "ltable.c", "ltm.c", "lundump.c", "lvm.c", "lzio.c", "lauxlib.c", "lbaselib.c", "lbitlib.c", "lcorolib.c", "ldblib.c", "liolib.c", "lmathlib.c", "loslib.c", "lstrlib.c", "ltablib.c", "loadlib.c", "linit.c"]])

env.AppendUnique(CPPDEFINES  = ["LUA_COMPAT_ALL", "NDEBUG"])
env.AppendUnique(CDEFINES    = ["LUA_USE_MACOSX"])
env.AppendUnique(LINKFLAGS   = ["-Wl,-install_name,liblua.dylib"])
env.AppendUnique(CFLAGS      = ["-O2"])
    
env.SharedLibrary(target="lua", source=extract)
"""
# ==================================================================================================================




# === Repository Builder ===========================================================================================
# The Repository (SVN & Git) builder are an extension of the Download builder, for getting repositories on-fly 
# ti build also library dependencies. Upload & Commit calls are also added, but no deeper functionality exists
# on this builder. Both builder are not intended for maintaining the repository of the project

# uses Repository-Builder for management Git repositories
#env.GitClone("gittest", "https://github.com/flashpixx/Storage.git")
#env.GitPull("xxx", "gittest")
#env.GitCommit("first test commit 1234", "gittest")


# uses Repository-Builder for management SVN repositories
#env.SVNCheckout("svntest", "svn://vmgentoo/scons")
#print env.SVNUpdate("xxxx", "svntest")
#env.SVNCommit("letzte Ã„nderung", "svntest")
# ==================================================================================================================