# -*- coding: utf-8 -*-

# === Test Script for the Builder ===============

import urllib2
import re


# test URL Downloadbuilder with LAPack, we use a normal
# Python function for getting the latest download URL
def LaPack_DownloadURL() :
    # read download path of the LAPack (latest version)
    f = urllib2.urlopen("http://www.netlib.org/lapack/")
    html = f.read()
    f.close()
    
    found = re.search("<a href=\"http://www.netlib.org/lapack/(.*)tgz\">", html)
    if found == None :
        raise SCons.Errors.StopError("LAPack Download URL not found")
        
    return found.group(0).replace("<a href=\"", "").replace("\">", "")


# test URL Downloadbuilder with LUA, we use a normal
# Python function for getting the latest download URL
def LUA_DownloadURL()  :
    # read download path of the LUA library (latest version)
    f = urllib2.urlopen("http://www.lua.org/download.html")
    html = f.read()
    f.close()

    found = re.search("<a href=\"ftp/lua-(.*)\.tar\.gz\">", html, re.IGNORECASE)
    if found == None :
        raise RuntimeError("LUA Download URL not found")

    downloadurl = found.group(0).replace("\"", "").replace("<", "").replace(">", "")
    downloadurl = re.sub(r'(?i)a href=', "", downloadurl)

    return "http://www.lua.org/" + downloadurl





# test Scons script with my builders + create environment
env = Environment( tools = ["default", "URLDownload", "Unpack"] )

# uses URLDownload-Builder and run Unpack-Builder after download
env.Unpack("lapack-extract",  env.URLDownload( "lapack-download", LaPack_DownloadURL() ) )
#env.Unpack("lua-extract",  env.URLDownload( "lua-download.zip", "http://downloads.sourceforge.net/project/luabinaries/5.2.1/Docs%20and%20Sources/lua-5.2.1_Sources.zip?r=http%3A%2F%2Fluabinaries.sourceforge.net%2Fdownload.html&ts=1365282098&use_mirror=netcologne", URLDOWNLOAD_USEURLFILENAME=False ) )
#env.Unpack("lua-extract",  env.URLDownload( "lua-download", LUA_DownloadURL() ) )
