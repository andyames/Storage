# -*- coding: utf-8 -*-

import os, re, subprocess, tempfile
import SCons.Action, SCons.Errors

# https://developer.apple.com/library/mac/#documentation/MacOSX/Conceptual/BPFrameworks/Concepts/FrameworkAnatomy.html#//apple_ref/doc/uid/20002253-BAJEJJAB

# === function for build environment object =========================================================================

# creates the global build object
# @return build object
def createEnvironment() :
    directxdir = ""
    if "DXSDK_DIR" in os.environ :
        directxdir = os.environ["DXSDK_DIR"]

    vars = Variables()
    vars.Add(PathVariable("installdir", "install directory for the library", os.path.join("bin"),  PathVariable.PathIsDirCreate))
    vars.Add(EnumVariable("buildtarget", "type of the library", "shared", allowed_values=("shared", "static")))
    vars.Add(EnumVariable("buildtype", "name of target build type", "release", allowed_values=("debug", "release")))
    vars.Add(EnumVariable("platform", "build platform", "", allowed_values=("", "linux", "osx-library", "osx-framework", "win32-gcc", "win32-msvc", "win64-msvc")))

    vars.Add(PathVariable("directxsdk", "directory of the DirectX SDK", directxdir,  PathVariable.PathAccept))

    # set the correct build toolkit (and a own process spawn)
    env = Environment(tools = [], variables=vars)
    Help(vars.GenerateHelpText(env))
    
    if env["platform"] in ["linux", "osx-library", "osx-framework"] :
        env.Tool("default")
        
    elif env["platform"] in ["win32-msvc", "win64-mvc"] :
        env.Tool("msvc")
        env.Tool("mslink")
        env.Tool("msvs")
        env.Tool("mssdk")
        
    elif env["platform"] in ["win32-gcc", "win64-gcc"] :
        env.Tool("mingw")
        
    else :
        raise SCons.Errors.StopError("platform is not set")

    # check parameter
    if env["buildtarget"] == "static" and env["platform"] == "osx-framework" :
        raise SCons.Errors.StopError("static library can not be build with the an osx framework")
    if env["buildtype"] == "debug" and env["platform"] == "osx-framework" :
        raise SCons.Errors.StopError("debug library can not be build with the an osx framework")
    if not os.path.exists(env["directxsdk"]) and "msvc" in env["platform"] :
        raise SCons.Errors.StopError("Direct X SDK is not found")
        
    # set constants and global values (directory names are relative to the SConstruct)
    # read first Irrlicht SDK version from the file include/IrrCompileConfig.h
    configfile = open( os.path.join("include", "IrrCompileConfig.h"), "r" )
    irrlichtversion = re.search("#define(.*)IRRLICHT_SDK_VERSION(.*)", configfile.read())
    configfile.close()
    if irrlichtversion == None :
        raise SCons.Errors.StopError("can not find Irrlicht SDK version in the configuration header")
    
    env["irr_libversion"]         = irrlichtversion.group(2).replace("\"", "").strip()
    env["irr_libinstallname"]     = "Irrlicht"
    env["irr_srcexamples"]        = "examples"
    env["irr_srclibrary"]         = os.path.join("source", "Irrlicht")
    if env["buildtype"] == "debug" :
        env["irr_libinstallname"] = env["irr_libinstallname"] + "Debug"
    
    if "CPPPATH" in os.environ :
        env.AppendUnique(CPPPATH  = os.environ["CPPPATH"].split(os.pathsep))
    if "CXXFLAGS" in os.environ :
        env.AppendUnique(CXXFLAGS = os.environ["CXXFLAGS"].split(" "))   
    if "LIBRARY_PATH" in os.environ :
        env.AppendUnique(CIBPATH  = os.environ["LIBRARY_PATH"].split(os.pathsep))
    if "LDFLAGS" in os.environ :
        env.AppendUnique(LINKFLAGS = os.environ["LDFLAGS"].split(" "))    
    
    return env


# creates a build object for the library,
# and sets the platform specific build data
# @param env build object
# @return cloned build object with library specific data
def getLibraryBuildEnvironment(env) :
    envlib = env.Clone()
    
    # define global options
    envlib.AppendUnique(CPPPATH             = ["include", envlib["irr_srclibrary"], os.path.join(envlib["irr_srclibrary"], "zlib"), os.path.join(envlib["irr_srclibrary"], "jpeglib"), os.path.join(envlib["irr_srclibrary"], "libpng")])
    envlib.AppendUnique(CPPDEFINES          = ["IRRLICHT_EXPORTS", "PNG_THREAD_UNSAFE_OK", "PNG_NO_MMX_CODE", "PNG_NO_MNG_FEATURES"])
    if envlib["buildtype"] == "debug" :
        envlib.AppendUnique(CPPDEFINES      = ["_DEBUG"])
    
    # define platform specific options
    if envlib["platform"] in ["osx-library", "osx-framework"] :
        libname = envlib["LIBPREFIX"] + envlib["irr_libinstallname"] + "." + envlib["irr_libversion"] + envlib["SHLIBSUFFIX"]
        
        envlib.AppendUnique(CPPDEFINES      = ["MACOSX"])
        envlib.AppendUnique(CXXFLAGS        = ["-Wall", "-pipe"])
        envlib.AppendUnique(CPPPATH         = [os.path.join(envlib["irr_srclibrary"], "MacOSX")])
        envlib.AppendUnique(LINKFLAGS       = ["--no-export-all-symbols", "--add-stdcall-alias", "-Wl,-framework,Cocoa", "-Wl,-framework,OpenGL", "-Wl,-framework,IOKit", "-Wl,-install_name,"+libname])

        if envlib["buildtype"] == "debug" :
            envlib.AppendUnique(CXXFLAGS    = ["-g"])
        elif envlib["buildtype"] == "release" :
            envlib.AppendUnique(CXXFLAGS    = ["-O3", "-fexpensive-optimizations"])

        envlib.AppendUnique(CFLAGS          = envlib["CXXFLAGS"])
        #-dynamiclib
    
    elif envlib["platform"] == "linux" :    
        libname = envlib["LIBPREFIX"] + envlib["irr_libinstallname"] + envlib["SHLIBSUFFIX"] + "." + envlib["irr_libversion"]

        envlib.AppendUnique(CXXFLAGS        = ["-Wall", "-pipe"])
        envlib.AppendUnique(LINKFLAGS       = ["--add-stdcall-alias", "-Wl,--soname="+libname])
        if envlib["buildtype"] == "debug" :
            envlib.AppendUnique(CXXFLAGS    = ["-g"])
        elif envlib["buildtype"] == "release" :
            envlib.AppendUnique(CXXFLAGS    = ["-O3", "-fexpensive-optimizations"])
            
        envlib.AppendUnique(CFLAGS          = envlib["CXXFLAGS"])
        
    
    elif envlib["platform"] in ["win32-gcc", "win64-gcc"] :
        # we need the kill-at flag, because the MSVC & g++ name mangeling are different, so we disable it http://en.wikipedia.org/wiki/Name_mangling
        envlib.AppendUnique(LINKFLAGS       = ["--add-stdcall-alias", "-Wl,--kill-at"])
        envlib.AppendUnique(CXXFLAGS        = ["-Wall", "-pipe"])
        envlib.AppendUnique(CPPDEFINES      = ["__GNUWIN32__", "WIN32", "_WINDOWS", "_USRDLL", "_WINDLL", "_MBCS"])
        envlib.AppendUnique(LIBS            = ["opengl32", "gdi32", "stdc++", "winmm"])
        
        if envlib["buildtype"] == "debug" :
            envlib.AppendUnique(CXXFLAGS    = ["-g"])
        elif envlib["buildtype"] == "release" :
            envlib.AppendUnique(CXXFLAGS    = ["-O3", "-fexpensive-optimizations"])

        envlib.AppendUnique(CFLAGS          = envlib["CXXFLAGS"])
        

    elif envlib["platform"] in ["win32-msvc", "win64-msvc"] :
        envlib.AppendUnique(CPPDEFINES      = ["WIN32", "_WINDOWS", "_USRDLL", "IRRLICHT_EXPORTS", "_CRT_SECURE_NO_DEPRECATE", "_WINDLL", "_MBCS"])
        envlib.AppendUnique(CXXFLAGS        = ["/analyze-", "/errorReport:queue", "/Gd", "/Gm-", "/GR-", "/nologo", "/W3", "/WX-", "/Zc:forScope", "/Zc:wchar_t"])
        envlib.AppendUnique(LINKFLAGS       = ["/VERSION:\""+envlib["irr_libversion"]+"\"", "/INCREMENTAL:NO", "/NOLOGO", "/NODEFAULTLIB:\"libci.lib\"", "/MANIFEST:NO", "/TLBID:1", "/DYNAMICBASE", "/ERRORREPORT:QUEUE"])
        envlib.AppendUnique(CPPPATH         = [os.path.join(envlib["directxsdk"], "Include")])
        envlib.AppendUnique(LIBS            = ["opengl32.lib", "gdi32.lib", "user32.lib", "advapi32.lib", "d3dx9.lib"])
        
        if envlib["buildtype"] == "debug" :
            envlib.AppendUnique(CPPDEFINES  = ["_ITERATOR_DEBUG_LEVEL=0"])
            envlib.AppendUnique(CXXFLAGS    = ["/fp:precise", "/GS", "/MTd", "/Od", "/Oy-", "/RTC1", "/Zi"])
            envlib.AppendUnique(LINKFLAGS   = ["/DEBUG"])
        elif envlib["buildtype"] == "release" :
            envlib.AppendUnique(CXXFLAGS    = ["/arch:SSE2", "/fp:fast", "/GL", "/GF", "/GS-", "/Gy-", "/MT", "/Ob2", "/Oi", "/Ot", "/Ox", "/Oy"])
            envlib.AppendUnique(LINKFLAGS   = ["/SUBSYSTEM:WINDOWS", "/OPT:REF", "/LTCG"])
        
        if "win32" in envlib["platform"] :
            envlib.AppendUnique(LINKFLAGS   = ["/MACHINE:X86"])
            envlib.AppendUnique(LIBPATH     = [os.path.join(envlib["directxsdk"], "Lib", "x86")])
        elif "win64" in envlib["platform"] :
            envlib.AppendUnique(LINKFLAGS   = ["/MACHINE:X64"]) 
            envlib.AppendUnique(LIBPATH     = [os.path.join(envlib["directxsdk"], "Lib", "x84")])

            
    
    return envlib
    

# creates a build object for the examples,
# and sets the platform specific build data
# @param env build object
# @return cloned build object with example specific data
def getExampleBuildEnvironment(env) :
    envexamples = env.Clone()
    
    # define platform specific data
    if envexamples["platform"] in ["osx-library", "osx-framework"] :
        envexamples.AppendUnique(CXXFLAGS        = ["-Wall", "-pipe"])
        if envexamples["buildtype"] == "debug" :
            envexamples.AppendUnique(CXXFLAGS    = ["-g"])
        elif envexamples["buildtype"] == "release" :
            envexamples.AppendUnique(CXXFLAGS    = ["-O3"])
    
        if envexamples["platform"] == "osx-framework" :
            envexamples.AppendUnique(CPPPATH     = [os.path.join(env["installdir"], "Irrlicht.framework", "Headers")])
            envexamples.AppendUnique(LINKFLAGS   = ["-Wl,-framework,Irrlicht", "-Wl,-F"+env["installdir"]])
        else :
            envexamples.AppendUnique(LIBS        = ["Irrlicht"])
            envexamples.AppendUnique(CPPPATH     = [os.path.join(env["installdir"], "include")])
            envexamples.AppendUnique(LIBPATH     = [os.path.join(env["installdir"], "lib")])


    elif envexamples["platform"] == "linux" :
        envexamples.AppendUnique(LIBS            = ["Irrlicht", "GL", "Xxf86vm"])
        envexamples.AppendUnique(CPPPATH         = [os.path.join(env["installdir"], "include")])
        envexamples.AppendUnique(LIBPATH         = [os.path.join(env["installdir"], "lib")])
        envexamples.AppendUnique(CXXFLAGS        = ["-Wall", "-pipe"])
        if envexamples["buildtype"] == "debug" :
            envexamples.AppendUnique(CXXFLAGS    = ["-g"])
        elif envexamples["buildtype"] == "release" :
            envexamples.AppendUnique(CXXFLAGS    = ["-O3"])
    
    
    elif envexamples["platform"] in ["win32-gcc", "win64-gcc"] :
        envexamples.AppendUnique(CPPPATH         = [os.path.join(env["installdir"], "include")])
        envexamples.AppendUnique(LIBPATH         = [os.path.join(env["installdir"], "lib")])
        envexamples.AppendUnique(LIBS            = ["Irrlicht", "gdi32", "opengl32"])
        envexamples.AppendUnique(CXXFLAGS        = ["-Wall", "-pipe"])
        if envexamples["buildtype"] == "debug" :
            envexamples.AppendUnique(CXXFLAGS    = ["-g"])
        elif envexamples["buildtype"] == "release" :
            envexamples.AppendUnique(CXXFLAGS    = ["-O3"])
        
    
    elif envexamples["platform"] in ["win32-msvc", "win64-msvc"] :
        envexamples.AppendUnique(CPPPATH         = [os.path.join(env["installdir"], "include")])
        envexamples.AppendUnique(LIBPATH         = [os.path.join(env["installdir"], "lib")])
        envexamples.AppendUnique(LIBS            = ["Irrlicht.lib", "user32.lib", "gdi32.lib", "opengl32.lib"])
        envexamples.AppendUnique(CXXFLAGS        = ["/analyze-", "/errorReport:queue", "/Gd", "/Gm-", "/GR-", "/nologo", "/W3", "/WX-", "/Zc:forScope", "/Zc:wchar_t"])
        if envexamples["buildtype"] == "debug" :
            envexamples.AppendUnique(CXXFLAGS    = ["/fp:precise", "/GS", "/MTd", "/Od", "/Oy-", "/RTC1", "/Zi"])
        elif envexamples["buildtype"] == "release" :
            envexamples.AppendUnique(CXXFLAGS    = ["/arch:SSE2", "/fp:fast", "/GL", "/GF", "/GS-", "/Gy-", "/MT", "/Ob2", "/Oi", "/Ot", "/Ox", "/Oy"])
            envexamples.AppendUnique(LINKFLAGS   = ["/SUBSYSTEM:CONSOLE", "/OPT:REF", "/LTCG"])
        
        if "win32" in envlib["platform"] :
            envlib.AppendUnique(LINKFLAGS        = ["/MACHINE:X86"])
        elif "win64" in envlib["platform"] :
            envlib.AppendUnique(LINKFLAGS        = ["/MACHINE:X64"])
    
    return envexamples


# runs the installation process
# @param env environment object
# @param lib build library object
# @param header headerfile list
def installLibrary(env, lib, header) :
    install = []
    if lib and type(lib) == type([]) :
        lib = lib[0]
    libname = str(lib).replace("']", "").replace("['", "")
    

    if env["platform"] in ["linux", "osx-library"] :
        if env["platform"] == "osx-library" :
            versionname = libname.replace(env["SHLIBSUFFIX"], "") + "." + env["irr_libversion"] + env["SHLIBSUFFIX"]
        elif env["platform"] == "linux" :
            versionname = libname + "." + env["irr_libversion"]
        
        install.append(env.Install( os.path.join(env["installdir"], "lib"), lib ))
        for i in header :
            install.append(env.Command( os.path.join(env["installdir"], "include", os.path.basename(str(i))), i, Copy("$TARGET", "$SOURCE")))
        if env["buildtarget"] == "shared" :
            install.append( env.Command(os.path.join(env["installdir"], "lib", versionname), os.path.basename(libname), "ln -s $SOURCE $TARGET") ) 


    elif env["platform"] == "osx-framework" :
        framework = os.path.join(env["installdir"], "Irrlicht.framework")

        data = []
        data.append(env.Install( os.path.join(framework, "Versions", env["irr_libversion"], "Libraries"), lib ))
        for i in header :
            data.append(env.Command( os.path.join(framework, "Versions", env["irr_libversion"], "Headers", os.path.basename(str(i))), i, Copy("$TARGET", "$SOURCE")))

        # remove existing links and create new ones
        install.append( env.Command(os.path.join(framework, "Irrlicht"), data, "rm -f $TARGET && ln -s "+os.path.join("Versions", env["irr_libversion"], "Libraries", os.path.basename(libname))+" $TARGET") )
        install.append( env.Command(os.path.join(framework, "Libraries"), data, "rm -f $TARGET && ln -s "+os.path.join("Versions", env["irr_libversion"], "Libraries")+" $TARGET") )
        install.append( env.Command(os.path.join(framework, "Headers"), data, "rm -f $TARGET && ln -s "+os.path.join("Versions", env["irr_libversion"], "Headers")+" $TARGET") )
        install.append( env.Command(os.path.join(framework, "Versions", "Current"), data, "rm -f $TARGET && ln -s "+os.path.join(env["irr_libversion"])+" $TARGET") )


    elif env["platform"] in ["win32-gcc", "win64-gcc", "win32-msvc", "win64-msvc"] :
        install.append(env.Install( os.path.join(env["installdir"], "lib"), lib ))
        for i in header :
            install.append(env.Command( os.path.join(env["installdir"], "include", os.path.basename(str(i))), i, Copy("$TARGET", "$SOURCE")))


    NoClean(install)
    Default(install)
    Clean(install, [env["platform"]+".res"])
    
# ===================================================================================================================






# ===================================================================================================================
# === create build commands =========================================================================================
env         = createEnvironment()
envlib      = getLibraryBuildEnvironment(env)
envexamples = getExampleBuildEnvironment(env)


# === set the sources (we use similar structure of the Makefile) ====================================================
# get all header files (for later installation)
headers = Glob(os.path.join("include", "*.h")) 

# library sources (libjpeg & bzip2 added manually, because not all files are needed)
libjpeg  = [ os.path.join(env["irr_srclibrary"], "jpeglib", i) for i in ["jcapimin.c", "jcapistd.c", "jccoefct.c", "jccolor.c", "jcdctmgr.c", "jchuff.c", "jcinit.c", "jcmainct.c", "jcmarker.c", "jcmaster.c", "jcomapi.c", "jcparam.c", "jcprepct.c", "jcsample.c", "jctrans.c", "jdapimin.c", "jdapistd.c", "jdatadst.c", "jdatasrc.c", "jdcoefct.c", "jdcolor.c", "jddctmgr.c", "jdhuff.c", "jdinput.c", "jdmainct.c", "jdmarker.c", "jdmaster.c", "jdmerge.c", "jdpostct.c", "jdsample.c", "jdtrans.c", "jerror.c", "jfdctflt.c", "jfdctfst.c", "jfdctint.c", "jidctflt.c", "jidctfst.c", "jidctint.c", "jmemmgr.c", "jmemnobs.c", "jquant1.c", "jquant2.c", "jutils.c", "jcarith.c", "jdarith.c", "jaricom.c"] ]
libbzip2 = [ os.path.join(env["irr_srclibrary"], "bzip2", i) for i in ["blocksort.c", "huffman.c", "crctable.c", "randtable.c", "bzcompress.c", "decompress.c", "bzlib.c"] ]

srclibrary = Glob(os.path.join(env["irr_srclibrary"], "*.cpp")) + Glob(os.path.join(env["irr_srclibrary"], "libpng", "*.c")) + Glob(os.path.join(env["irr_srclibrary"], "lzma", "*.c")) + Glob(os.path.join(env["irr_srclibrary"], "zlib", "*.c")) + Glob(os.path.join(env["irr_srclibrary"], "aesGladman", "*.cpp")) + libjpeg + libbzip2

if "osx" in env["platform"] :
    srclibrary.extend(Glob(os.path.join(envlib["irr_srclibrary"], "MacOSX", "*.mm")))


# sources of the examples
srcexamples = ["01.HelloWorld", "02.Quake3Map", "03.CustomSceneNode", "04.Movement", "05.UserInterface", "06.2DGraphics", "07.Collision", "08.SpecialFX", "09.Meshviewer", "10.Shaders", "11.PerPixelLighting", "12.TerrainRendering", "13.RenderToTexture", "15.LoadIrrFile", "16.Quake3MapShader", "17.HelloWorld_Mobile", "18.SplitScreen", "19.MouseAndJoystick", "20.ManagedLights", "22.MaterialViewer", "23.SMeshHandling", "24.CursorControl", "25.XmlHandling", "26.OcclusionQuery"]
if "win" in env["platform"] :
    srcexamples.append("14.Win32Window")
# ===================================================================================================================



# === build and install =============================================================================================
# build lib (first the object files and reference the files with the resource list - to suppress the "long command line" error message)
obj = []
if env["buildtarget"] == "shared" :
    obj = envlib.SharedObject(srclibrary)
elif env["buildtarget"] == "static" :
    obj = envlib.Object(srclibrary)

if "win" in envlib["platform"] :
	(fd, resource) = tempfile.mkstemp(".res", text=True)
    for obj_name in obj:
		fd.write ("%s\n" % os.path.abspath(str(obj_name)).replace("\\", "/"))    
    os.close(fd)
    envlib.AppendUnique(LINKFLAGS = [env["TEMPFILEPREFIX"]+resource])

    if env["buildtarget"] == "shared" :
        lib = envlib.SharedLibrary(env["irr_libinstallname"], [])
    elif env["buildtarget"] == "static" :
        lib = envlib.StaticLibrary(env["irr_libinstallname"], [])
    Depends(lib, obj)
    
else :
    if env["buildtarget"] == "shared" :
        lib = envlib.SharedLibrary(env["irr_libinstallname"], obj)
    elif env["buildtarget"] == "static" :
        lib = envlib.StaticLibrary(env["irr_libinstallname"], obj)

    

# build examples
examples = []
for i in srcexamples :
    examples.append( envexamples.Program( os.path.join("bin", "examples-"+envlib["platform"], i.replace(".", "_")), os.path.join(env["irr_srcexamples"], i, "main.cpp")) )


installLibrary(env, lib, headers)
NoClean(examples)
Alias("examples", examples)

